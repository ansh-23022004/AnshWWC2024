#include <iostream>
#include <vector>
#include <fstream>
#include <iomanip>
#include <string>
using namespace std;

class Item {
private:
    string itemID;
    string name;
    string category;
    int quantity;
    int reorderLevel;

public:
    // Constructor
    Item(string id, string n, string c, int q, int r) : itemID(id), name(n), category(c), quantity(q), reorderLevel(r) {}

    // Getters
    string getItemID() const { return itemID; }
    string getName() const { return name; }
    string getCategory() const { return category; }
    int getQuantity() const { return quantity; }
    int getReorderLevel() const { return reorderLevel; }

    // Setters
    void setQuantity(int q) { quantity = q; }

    // Methods
    bool needsReorder() const {
        return quantity < reorderLevel;
    }

    void displayItem() const {
        cout << left << setw(10) << itemID << setw(20) << name << setw(15) << category
             << setw(10) << quantity << setw(15) << reorderLevel << (needsReorder() ? "YES" : "NO") << endl;
    }
};

class InventoryManager {
private:
    vector<Item> inventory;

    void displayHeader() const {
        cout << left << setw(10) << "ItemID" << setw(20) << "Name" << setw(15) << "Category"
             << setw(10) << "Quantity" << setw(15) << "Reorder Level" << "Reorder Needed" << endl;
        cout << string(75, '-') << endl;
    }

public:
    void addItem() {
        string id, name, category;
        int quantity, reorderLevel;

        cout << "Enter Item ID: ";
        cin >> id;
        cout << "Enter Item Name: ";
        cin.ignore();
        getline(cin, name);
        cout << "Enter Item Category: ";
        getline(cin, category);
        cout << "Enter Quantity: ";
        cin >> quantity;
        cout << "Enter Reorder Level: ";
        cin >> reorderLevel;

        inventory.emplace_back(id, name, category, quantity, reorderLevel);
        cout << "Item added successfully.\n";
    }

    void updateStock() {
        string id;
        int newQuantity;

        cout << "Enter Item ID to update stock: ";
        cin >> id;

        for (auto &item : inventory) {
            if (item.getItemID() == id) {
                cout << "Enter new quantity: ";
                cin >> newQuantity;
                item.setQuantity(newQuantity);
                cout << "Stock updated successfully.\n";
                return;
            }
        }
        cout << "Item not found.\n";
    }

    void viewInventory() const {
        if (inventory.empty()) {
            cout << "Inventory is empty.\n";
            return;
        }

        displayHeader();
        for (const auto &item : inventory) {
            item.displayItem();
        }
    }

    void searchItem() const {
        string query;
        cout << "Enter name or category to search: ";
        cin.ignore();
        getline(cin, query);

        displayHeader();
        bool found = false;
        for (const auto &item : inventory) {
            if (item.getName() == query || item.getCategory() == query) {
                item.displayItem();
                found = true;
            }
        }
        if (!found) {
            cout << "No items found matching the query.\n";
        }
    }

    void exportToFile() const {
        ofstream outFile("inventory_report.txt");
        if (!outFile) {
            cout << "Error opening file for writing.\n";
            return;
        }

        outFile << left << setw(10) << "ItemID" << setw(20) << "Name" << setw(15) << "Category"
                << setw(10) << "Quantity" << setw(15) << "Reorder Level" << "Reorder Needed" << endl;
        outFile << string(75, '-') << endl;

        for (const auto &item : inventory) {
            outFile << left << setw(10) << item.getItemID() << setw(20) << item.getName() << setw(15) << item.getCategory()
                    << setw(10) << item.getQuantity() << setw(15) << item.getReorderLevel() << (item.needsReorder() ? "YES" : "NO") << endl;
        }

        outFile.close();
        cout << "Inventory data exported to inventory_report.txt successfully.\n";
    }
};

void displayMenu() {
    cout << "\nWarehouse Inventory Management System\n";
    cout << "-----------------------------------\n";
    cout << "1. Add New Item\n";
    cout << "2. Update Stock\n";
    cout << "3. View Inventory\n";
    cout << "4. Search Item\n";
    cout << "5. Export Inventory Data\n";
    cout << "6. Exit\n";
    cout << "Enter your choice: ";
}

int main() {
    InventoryManager manager;
    int choice;

    do {
        displayMenu();
        cin >> choice;

        switch (choice) {
            case 1:
                manager.addItem();
                break;
            case 2:
                manager.updateStock();
                break;
            case 3:
                manager.viewInventory();
                break;
            case 4:
                manager.searchItem();
                break;
            case 5:
                manager.exportToFile();
                break;
            case 6:
                cout << "Exiting the program. Goodbye!\n";
                break;
            default:
                cout << "Invalid choice. Please try again.\n";
        }
    } while (choice != 6);

    return 0;
}

#include <iostream>
#include <vector>
using namespace std;

// Definition for a binary tree node.
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        return buildBST(nums, 0, nums.size() - 1);
    }

private:
    TreeNode* buildBST(vector<int>& nums, int left, int right) {
        if (left > right) return nullptr;

        int mid = left + (right - left) / 2; // Find the middle element
        TreeNode* root = new TreeNode(nums[mid]); // Create the root node
        root->left = buildBST(nums, left, mid - 1); // Recursively build the left subtree
        root->right = buildBST(nums, mid + 1, right); // Recursively build the right subtree

        return root;
    }
};

// Helper function to print the tree (In-order traversal)
void printTree(TreeNode* root) {
    if (!root) return;
    printTree(root->left);
    cout << root->val << " ";
    printTree(root->right);
}

int main() {
    vector<int> nums = {-10, -3, 0, 5, 9};
    Solution solution;
    TreeNode* root = solution.sortedArrayToBST(nums);

    cout << "In-order traversal of the BST: ";
    printTree(root);
    cout << endl;

    return 0;
}


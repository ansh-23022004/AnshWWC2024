#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

struct Transaction {
    double amount;
    int frequency;
    string location;
    double suspiciousness_score;
};

// Custom comparator for priority queue (sorts by decreasing suspiciousness score)
struct CompareTransactions {
    bool operator()(const Transaction& lhs, const Transaction& rhs) const {
        return lhs.suspiciousness_score < rhs.suspiciousness_score;
    }
};

int main() {
    // Sample transaction data (replace with actual data)
    vector<Transaction> transactions = {
        {1000.0, 1, "New York", 0.8},
        {50.0, 10, "Los Angeles", 0.2},
        {5000.0, 1, "Tokyo", 0.9},
        {20.0, 5, "London", 0.1},
        {100.0, 2, "Paris", 0.3}
    };

    // Calculate suspiciousness score (replace with actual calculation logic)
    // ... (Your logic to calculate suspiciousness_score for each transaction) ...

    // Create a priority queue to store transactions 
    priority_queue<Transaction, vector<Transaction>, CompareTransactions> priority_queue;

    // Insert transactions into the priority queue
    for (const Transaction& transaction : transactions) {
        priority_queue.push(transaction);
    }

    // Get and process high-risk transactions
    const int num_high_risk = 3; // Number of high-risk transactions to process
    for (int i = 0; i < num_high_risk; ++i) {
        if (!priority_queue.empty()) {
            Transaction high_risk_transaction = priority_queue.top();
            priority_queue.pop();

            cout << "High-risk transaction:" << endl;
            cout << "Amount: " << high_risk_transaction.amount << endl;
            cout << "Frequency: " << high_risk_transaction.frequency << endl;
            cout << "Location: " << high_risk_transaction.location << endl;
            cout << "Suspiciousness Score: " << high_risk_transaction.suspiciousness_score << endl;
            cout << endl;

            // Send high-risk transaction to analysts for review
            // ... (Your logic to handle high-risk transactions) ...
        }
    }

    return 0;
}
